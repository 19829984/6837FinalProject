// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSWorley
#pragma kernel CSWorleyNormalize
static const int numThreads = 8;
static const int minMaxAccuracy = 10000000;
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result;

int resolution;
StructuredBuffer<float3> WorleyPointsLv1;
StructuredBuffer<float3> WorleyPointsLv2;
StructuredBuffer<float3> WorleyPointsLv3;
int numCellsLv1;
int numCellsLv2;
int numCellsLv3;
float frequency;
RWStructuredBuffer<int> minMaxBuffer;

static const int3 offsets[] =
{
    // centre
    int3(0,0,0),
    // front face
    int3(0,0,1),
    int3(-1,1,1),
    int3(-1,0,1),
    int3(-1,-1,1),
    int3(0,1,1),
    int3(0,-1,1),
    int3(1,1,1),
    int3(1,0,1),
    int3(1,-1,1),
    // back face
    int3(0,0,-1),
    int3(-1,1,-1),
    int3(-1,0,-1),
    int3(-1,-1,-1),
    int3(0,1,-1),
    int3(0,-1,-1),
    int3(1,1,-1),
    int3(1,0,-1),
    int3(1,-1,-1),
    // ring around centre
    int3(-1,1,0),
    int3(-1,0,0),
    int3(-1,-1,0),
    int3(0,1,0),
    int3(0,-1,0),
    int3(1,1,0),
    int3(1,0,0),
    int3(1,-1,0)
};

float maxComponent(float3 vec) {
    return max(vec.x, max(vec.y, vec.z));
}

float minComponent(float3 vec) {
    return min(vec.x, min(vec.y, vec.z));
}

float sampleWorley(StructuredBuffer<float3> points, int numCells, float3 samplePos) {
    float min_dist_sqr = 1;
    int3 cell_id = floor(samplePos * numCells);

    for (int adjCellOffsetIndx = 0; adjCellOffsetIndx < 27; adjCellOffsetIndx++)
    {
       int3 adj_cell_id = cell_id + offsets[adjCellOffsetIndx];

        if (minComponent(adj_cell_id) == -1 || maxComponent(adj_cell_id) == numCells) //We wrap around if adjacent cell is outside of our range
        {
            int3 w_cell_id = (adj_cell_id + numCells) % (uint3)numCells;

            int wrapped_cell_index = w_cell_id.x + numCells * (w_cell_id.y + w_cell_id.z * numCells);
            float3 wrapped_point = points[wrapped_cell_index];

            for (int wrapOffsetIndex = 0; wrapOffsetIndex < 27; wrapOffsetIndex++) //Try all offsets to find true distance of the wrapped point
            {
                float3 vec_to_sample = samplePos - (wrapped_point + offsets[wrapOffsetIndex]);
                min_dist_sqr = min(min_dist_sqr, dot(vec_to_sample, vec_to_sample));
            }
        }
        else //No need to wrap
        {
            int adj_cell_index = adj_cell_id.x + numCells * (adj_cell_id.y + adj_cell_id.z * numCells);
            float3 adj_point = points[adj_cell_index];
            float3 vec_to_sample = samplePos - adj_point;
            min_dist_sqr = min(min_dist_sqr, dot(vec_to_sample, vec_to_sample));
        }
    }

    return sqrt(min_dist_sqr);
}

[numthreads(numThreads, numThreads, numThreads)]
void CSWorley(uint3 id : SV_DispatchThreadID)
{
    float3 pos = id / (float)resolution;
    float sample_result_lv1 = sampleWorley(WorleyPointsLv1, numCellsLv1, pos);
    float sample_result_lv2 = sampleWorley(WorleyPointsLv2, numCellsLv2, pos);
    float sample_result_lv3 = sampleWorley(WorleyPointsLv3, numCellsLv3, pos);

    float sum = sample_result_lv1 + frequency * sample_result_lv2 + sample_result_lv3 * frequency * frequency;
    float max_val = 1 + frequency + frequency * frequency;

    //Clamp values
    sum /= max_val;

    int val = (int)(sum * minMaxAccuracy);
    InterlockedMin(minMaxBuffer[0], val); //Keep track of min and max across all pixels upon first render
    InterlockedMax(minMaxBuffer[1], val);

    Result[id] = sum;
}

[numthreads(numThreads, numThreads, numThreads)]
void CSWorleyNormalize(uint3 id : SV_DispatchThreadID) {
    float minVal = (float)minMaxBuffer[0] / minMaxAccuracy; //Use min and max values recorded from first render to normalize
    float maxVal = (float)minMaxBuffer[1] / minMaxAccuracy;
    float4 normalizedVal = (Result[id] - minVal) / (maxVal - minVal);

    Result[id] = normalizedVal;
}
